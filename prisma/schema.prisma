// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id            String     @id @default(cuid())
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @default(now())
  name          String?
  password      String
  email         String     @unique
  isAdmin       Boolean
  todos         Todos[]
  tickets       Ticket[]
  file          UserFile[]
  notes         Notes[]
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Ticket {
  id         Int          @id @default(autoincrement())
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @default(now())
  name       String
  title      String
  detail     String?
  email      String
  note       String?
  isComplete Boolean
  priority   String
  assignedTo User?        @relation(fields: [userId], references: [id])
  client     Client       @relation(fields: [clientId], references: [id])
  clientId   Int
  userId     String
  TicketFile TicketFile[]
}

model Client {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
  name        String
  email       String   @unique
  contactName String
  number      String?
  notes       String?
  tickets     Ticket[]
}

model UserFile {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  filename  String
  path      String
  userId    String
  user      User     @relation(fields: [userId], references: [id])
}

model TicketFile {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  filename  String
  path      String
  ticketId  Int
  ticket    Ticket   @relation(fields: [ticketId], references: [id])
}

model Notes {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  title     String
  note      String
  createdBy User     @relation(fields: [userId], references: [id])
  userId    String
}

model Todos {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  text      String
  done      Boolean  @default(false)
  createdBy User     @relation(fields: [userId], references: [id])
  userId    String
}

model Webhooks {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  name      String
  url       String
  type      Hook
  active    Boolean
  secret    String?
  createdBy String
}

model YoutubeApi {
  id        String @id @default(cuid())
  channelId String
}

enum Hook {
  ticket_created
  ticket_status_changed
}
